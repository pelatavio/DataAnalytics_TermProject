z<- seq(0.1,100,0.1)
E<-rnorm(1000, 0, 3)
y <- a + B*z + E
X<-cbind(intercept, z)
coef<-inv(t(X) %*% X) %*% (t(X)%*%y)
coef[2]
}
beta_hat2 = vector("numeric", 500)
for (i in 1:500) {
beta_hat2[[i]] <- coef2(500)
}
beta_hat2
mean(beta_hat2)
sd(beta_hat2)
?replicate
beta_hat3 <- replicate(500, coef2())
mean(beta_hat3)
sd(beta_hat3)
l
#load in tictoc
library(tictoc)
tic()
beta_hat3 <- replicate(500, coef2())
toc()
mean(E)
mean(E)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/samipoteet/Documents/GitHub/course-materials/lecture-slides/10-Spatial")
# load in libraries and data
library(sf)
library(tidyverse)
library(tidyverse)
library(tmap)
stations = st_read("data/bart_stations_2019.geojson")
alameda = counties %>% filter(NAME == "Alameda")
counties = st_read("data/california_counties/CaliforniaCounties.shp") %>%
st_make_valid()
alameda = counties %>% filter(NAME == "Alameda")
#change distance units from m to km
units::set_units(st_distance(stations), km)
#set crs to one that preserves distance
alameda_dist = st_transform(alameda, crs = 4326)
stations_dist = st_transform(stations, crs = 4326)
#create a 5km buffer around each station in a projection that preserves distance
stations_5km = st_buffer(stations_dist, dist = 5000)  # in the CRS's length units
trans = st_intersection(stations_5km, alameda_dist)
area = units::set_units(st_area(st_transform(trans, 3857)), km^2)
library(rmapshaper)
trans1<-ms_erase(alameda_dist, trans)
map1<-tm_shape(trans1)+tm_polygons()
area_ala = units::set_units(st_area(st_transform(alameda_dist, 3857)), km^2)
area_trans1 = units::set_units(st_area(st_transform(trans1, 3857)), km^2)
xx = area_ala - area_trans1
x=sum(xx)
y = sum(area_ala)
x/y
protected = st_read("data/protected_areas/CPAD_2020a_units.shp")%>%
st_transform(4326)
setwd("/Users/samipoteet/Documents/GitHub/course-materials/DataAnalytics_TermProject")
library(pacman)
p_load(
broom, tidyverse,
ggplot2, ggthemes, ggforce, ggridges, cowplot, scales,
latex2exp, viridis, extrafont, gridExtra, plotly, ggformula,
kableExtra, DT,
snakecase, janitor, knitr, future, furrr,
MASS, estimatr, tidymodels, glmnet,
huxtable, here, magrittr, parallel
)
# Load the credit dataset
credit_df = ISLR::Credit %>% clean_names()
# Processing recipe: Define ID, standardize, create dummies, rename (lowercase)
credit_recipe = credit_df %>% recipe(balance ~ .) %>%
update_role(id, new_role = "id variable") %>%
step_normalize(all_predictors() & all_numeric()) %>%
step_dummy(all_predictors() & all_nominal()) %>%
step_rename_at(everything(), fn = str_to_lower)
# Time to juice
credit_clean = credit_recipe %>% prep() %>% juice()
# Define our range of lambdas (glmnet wants decreasing range)
lambdas = 10^seq(from = 5, to = -2, length = 100)
# Fit ridge regression
est_ridge = glmnet(
x = credit_clean %>% dplyr::select(-balance, -id) %>% as.matrix(),
y = credit_clean$balance,
standardize = F,
alpha = 0,
lambda = lambdas
)
ridge_df = est_ridge %>% coef() %>% t() %>% as.matrix() %>% as.data.frame()
ridge_df %<>% dplyr::select(-1) %>% mutate(lambda = est_ridge$lambda)
ridge_df %<>% gather(key = "variable", value = "coefficient", -lambda)
ggplot(
data = ridge_df,
aes(x = lambda, y = coefficient, color = variable)
) +
geom_line() +
scale_x_continuous(
expression(lambda),
labels = c("0.1", "10", "1,000", "100,000"),
breaks = c(0.1, 10, 1000, 100000),
trans = "log10"
) +
scale_y_continuous("Ridge coefficient") +
scale_color_viridis_d("Predictor", option = "magma", end = 0.9) +
theme_minimal(base_size = 20, base_family = "Fira Sans Book") +
theme(legend.position = "bottom")
ridge_df = est_ridge %>% coef() %>% t() %>% as.matrix() %>% as.data.frame()
ridge_df %<>% dplyr::select(-1) %>% mutate(lambda = est_ridge$lambda)
ridge_df %<>% gather(key = "variable", value = "coefficient", -lambda)
ggplot(
data = ridge_df,
aes(x = lambda, y = coefficient, color = variable)
) +
geom_line() +
scale_x_continuous(
expression(lambda),
labels = c("0.1", "10", "1,000", "100,000"),
breaks = c(0.1, 10, 1000, 100000),
trans = "log10"
) +
scale_y_continuous("Ridge coefficient") +
scale_color_viridis_d("Predictor", option = "magma", end = 0.9) +
theme_minimal(base_size = 20, base_family = "Fira Sans Book") +
theme(legend.position = "bottom")
library(tidymodels)
data(ames)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidymodels")) install.packages("tidymodels")
library(tidymodels)
data(ames)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
library(dplyr)
data(ames)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
dplyr::select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
ols1 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses)
ols1
houses2 = augment(ols1, newdata = houses, interval = "prediction")
houses2 |> relocate(contains(".")) |> head()
houses2$se <- (houses2$.resid^2)
houses2$mse <- sum(houses2$se)/2930
houses2$rmse <- sqrt(houses2$mse)
houses2$rmse2 <- sd(houses2$.resid)
houses2$se <- (houses2$.resid^2)
houses2$mse <- sum(houses2$se)/2930
houses2$rmse <- sqrt(houses2$mse)
houses2$rmse2 <- sd(houses2$.resid)
View(houses2)
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
ols4
# create new data frame with addition variables from ames
houses3 = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area,
garden = Lot_Frontage,
bath = Full_Bath,
bedroom = Bedroom_AbvGr,
paved = ifelse(Street == "Pave", 1, 0)
) %>%
select(id, SalePrice, age, area, Lot_Area, bedroom, Neighborhood, garden, bath, paved)
# create new data frame with addition variables from ames
houses3 = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area,
garden = Lot_Frontage,
bath = Full_Bath,
bedroom = Bedroom_AbvGr,
paved = ifelse(Street == "Pave", 1, 0)
) %>%
dplyr::select(id, SalePrice, age, area, Lot_Area, bedroom, Neighborhood, garden, bath, paved)
houses3 <- houses3 %>%
drop_na(bedroom)%>%
mutate(bedroom = 1 + bedroom)
houses3$ln_bedroom <- log(houses3$bedroom)
ols2 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2), data = houses3)
ols2
# calculate the
houses4 = augment(ols2, newdata = houses3, interval = "prediction")
houses4 |> relocate(contains(".")) |> head()
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
# check rmse
houses5 = augment(ols3, newdata = houses3, interval = "prediction")
# calculate the rmse
houses4 = augment(ols2, newdata = houses3, interval = "prediction")
houses4 |> relocate(contains(".")) |> head()
```{r}
houses4$se <- (houses4$.resid^2)
houses4$mse <- sum(houses4$se)/2930
houses4$rmse <- sqrt(houses4$mse)
```{r}
```{r}
ols3 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses3)
ols3
# check rmse
houses5 = augment(ols3, newdata = houses3, interval = "prediction")
houses5 |> relocate(contains(".")) |> head()
houses5$se <- (houses5$.resid^2)
houses5$mse <- sum(houses5$se)/2930
houses5$rmse <- sqrt(houses5$mse)
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
# spit data set into testing and training
set.seed(123)
data_split   = initial_split(houses5, prop = 0.75)
houses_train = training(data_split)
houses_test  = testing(data_split)
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
ols4
ols5 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2), data = houses_train)
ols5
ols6 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses_train)
ols6
# calculate rmse for ols1
houses6 = augment(ols4, data = houses_train, newdata = houses_test, interval = "prediction")
houses6 |> relocate(contains(".")) |> head()
houses6$se <- (houses6$.resid^2)
houses6$mse <- sum(houses6$se)/2930
houses6$rmse <- sqrt(houses6$mse)
View(houses6)
# calculate rmse for ols1
houses6 = augment(ols4, data = houses5, newdata = houses_test, interval = "prediction")
houses6 |> relocate(contains(".")) |> head()
houses6$se <- (houses6$.resid^2)
houses6$mse <- sum(houses6$se)/2930
houses6$rmse <- sqrt(houses6$mse)
View(houses6)
# calculate rmse for ols2
houses7 = augment(ols5, data = houses5, newdata = houses_test, interval = "prediction")
houses7 |> relocate(contains(".")) |> head()
houses7$se <- (houses7$.resid^2)
houses7$mse <- sum(houses7$se)/2930
houses7$rmse <- sqrt(houses7$mse)
View(houses7)
# calculate rmse for ols2
houses7 = augment(ols5, data = houses5, newdata = houses_test)
houses7 |> relocate(contains(".")) |> head()
houses7$se <- (houses7$.resid^2)
houses7$mse <- sum(houses7$se)/2930
houses7$rmse <- sqrt(houses7$mse)
View(houses7)
# calculate rmse for ols2
houses7 = augment(ols5, data = houses5, newdata = houses_test,interval = "prediction")
houses7 |> relocate(contains(".")) |> head()
houses7$rmse <- sd(houses7$.resid)
View(houses7)
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
ols4
ols5 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2), data = houses_train)
ols5
ols6 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses_train)
ols6
# calculate rmse for ols1
houses6 = augment(ols4, data = houses5, newdata = houses_test, interval = "prediction")
houses6 |> relocate(contains(".")) |> head()
houses6$rmse <- sd(houses6$.resid)
# calculate rmse for ols2
houses7 = augment(ols5, data = houses5, newdata = houses_test,interval = "prediction")
houses7 |> relocate(contains(".")) |> head()
houses7$rmse <- sd(houses7$.resid)
# calculate rmse for ols3
houses8 = augment(ols6, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
View(houses8)
View(houses8)
View(houses7)
View(houses6)
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
ols4
ols5 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2), data = houses_train)
ols5
ols6 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses_train)
ols6
# calculate rmse for ols1
houses6 = augment(ols4, newdata = houses_test, interval = "prediction")
houses6 |> relocate(contains(".")) |> head()
houses6$rmse <- sd(houses6$.resid)
# calculate rmse for ols2
houses7 = augment(ols5, newdata = houses_test,interval = "prediction")
houses7 |> relocate(contains(".")) |> head()
houses7$rmse <- sd(houses7$.resid)
# calculate rmse for ols3
houses8 = augment(ols6, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
View(houses6)
View(houses6)
houses2$rmse <- sd(houses2$.resid)
View(houses2)
View(houses8)
View(houses5)
# spit data set into testing and training
set.seed(12374)
data_split   = initial_split(houses5, prop = 0.75)
houses_train = training(data_split)
houses_test  = testing(data_split)
# spit data set into testing and training
set.seed(12374)
data_split   = initial_split(houses5, prop = 0.75)
houses_train = training(data_split)
houses_test  = testing(data_split)
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
ols4
ols5 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2), data = houses_train)
ols5
ols6 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses_train)
ols6
# calculate rmse for ols1
houses6 = augment(ols4, newdata = houses_test, interval = "prediction")
houses6 |> relocate(contains(".")) |> head()
houses6$rmse <- sd(houses6$.resid)
# calculate rmse for ols2
houses7 = augment(ols5, newdata = houses_test,interval = "prediction")
houses7 |> relocate(contains(".")) |> head()
houses7$rmse <- sd(houses7$.resid)
# calculate rmse for ols3
houses8 = augment(ols6, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
View(houses5)
View(houses8)
# spit data set into testing and training
set.seed(12345)
data_split   = initial_split(houses5, prop = 0.75)
houses_train = training(data_split)
houses_test  = testing(data_split)
# spit data set into testing and training
set.seed(12345)
data_split   = initial_split(houses5, prop = 0.75)
houses_train = training(data_split)
houses_test  = testing(data_split)
1. Estimate each of your 3 regression models from Part A on only your training dataset
```{r}
# repeat process
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
ols4
ols5 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2), data = houses_train)
ols5
ols6 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses_train)
ols6
# calculate rmse for ols1
houses6 = augment(ols4, newdata = houses_test, interval = "prediction")
houses6 |> relocate(contains(".")) |> head()
houses6$rmse <- sd(houses6$.resid)
# calculate rmse for ols2
houses7 = augment(ols5, newdata = houses_test,interval = "prediction")
houses7 |> relocate(contains(".")) |> head()
houses7$rmse <- sd(houses7$.resid)
# calculate rmse for ols3
houses8 = augment(ols6, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
View(houses8)
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidymodels")) install.packages("tidymodels")
library(tidymodels)
library(dplyr)
data(ames)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
dplyr::select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
# Part A: Regressions and Prediction Errors
1. Estimate the following regression
```{r}
ols1 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses)
ols1
houses2 = augment(ols1, newdata = houses, interval = "prediction")
houses2 |> relocate(contains(".")) |> head()
Now calculate the root mean squared error (i.e., the square root of the MSE) of the prediction from this first regression.
```{r}
houses2$rmse <- sd(houses2$.resid)
3. Estimate your own regression and calculate its RMSE.
```{r}
# create new data frame with addition variables from ames
houses3 = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area,
garden = Lot_Frontage,
bath = Full_Bath,
bedroom = Bedroom_AbvGr,
paved = ifelse(Street == "Pave", 1, 0)
) %>%
dplyr::select(id, SalePrice, age, area, Lot_Area, bedroom, Neighborhood, garden, bath, paved)
better regression
```{r}
houses3 <- houses3 %>%
drop_na(bedroom)%>%
mutate(bedroom = 1 + bedroom)
houses3$ln_bedroom <- log(houses3$bedroom)
ols2 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2), data = houses3)
ols2
```{r}
# calculate the rmse
houses4 = augment(ols2, newdata = houses3, interval = "prediction")
houses4 |> relocate(contains(".")) |> head()
```{r}
houses4$rmse <- sd(houses4$.resid)
```{r}
```{r}
ols3 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses3)
ols3
# check rmse
houses5 = augment(ols3, newdata = houses3, interval = "prediction")
houses5 |> relocate(contains(".")) |> head()
houses5$rmse <- sd(houses5$.resid)
View(houses5)
View(houses4)
ols4 = lm(SalePrice ~ age + area + age*area + I(area^2) + I(age^2), data = houses_train)
ols4
ols5 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2), data = houses_train)
ols5
ols6 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses_train)
ols6
# calculate rmse for ols1
houses6 = augment(ols4, newdata = houses_test, interval = "prediction")
houses6 |> relocate(contains(".")) |> head()
houses6$rmse <- sd(houses6$.resid)
# calculate rmse for ols2
houses7 = augment(ols5, newdata = houses_test,interval = "prediction")
houses7 |> relocate(contains(".")) |> head()
houses7$rmse <- sd(houses7$.resid)
# calculate rmse for ols3
houses8 = augment(ols6, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
View(houses8)
View(houses7)
View(houses6)
View(houses7)
View(houses8)
View(houses5)
# calculate rmse for ols3
houses8 = augment(ols6, data = houses5, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
View(houses8)
# calculate rmse for ols3
houses8 = augment(ols6, data = houses_train, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
View(houses8)
# same as ols3
ols6 = lm(SalePrice ~ age + area + garden + bedroom + bath + bath*bedroom + ln_bedroom + poly(age^2) + I(area^2) + area*bath + paved + age*paved, data = houses_train)
ols6
# calculate rmse for ols3
houses8 = augment(ols6, data = houses_train, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
View(houses7)
View(houses8)
# calculate rmse for ols3
houses8 = augment(ols6, data = houses_train, newdata = houses_test, interval = "prediction")
houses8$rmse <- sd(houses8$.resid)
summary(houses8$rmse)
# calculate rmse for ols3
houses8 = augment(ols6, newdata = houses_test, interval = "prediction")
houses8 |> relocate(contains(".")) |> head()
houses8$rmse <- sd(houses8$.resid)
summary(houses8$rmse)
houses2$rmse <- sd(houses2$.resid)
summary(houses2$rmse)
